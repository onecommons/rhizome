#?zml0.8

!slide Rhizome

!!An open-source, Python-based application stack for creating RDF-based web applications.
!!A wiki that let's users create dynamic, structured content with explicit semantics.

!slide Rhizome Architecture

[[rhizomearch.png]]

!slide Why Bother?
* rapid development
** no fixed database schema needed 
** application can focus on semantics not environment specifics
* easily evolvable
** loosly coupled, easily decomposable
** easily create data with explict semantics, easily reused and repurposed  

!slide RDF and the semantic web
* In 1991 Tim Berners-Lee invents the Web, it succeeds because it much simpler than previous academic hypertext systems (e.g. doesn't try to guarantee consistency)  
* A decade later he decides he wants to create a new, much more complicated "Semantic" Web. 
** Goodbye HTML; Hello Descriptive Logic ontologies
** Adoption has been slow, best known is RSS and FOAF 
* A definition for non-geeks
** RDF is a standard way to describe URLs that refer not to web pages but to any kind of abstract entity. We call the network formed by the interlinking of these abstract URLs the "semantic web", in the same way that we call the network formed by the interlinking of web pages as "the web".


!slide  Why RDF?
* At its core very simple
** a standard way to declare name/value pairs about a resource (i.e. a URL) 
* Gives us a few, very useful tools 
** globally unique resources and names -- no namespace clashes
** precise rules for understanding descriptions:  (RDF Schema, OWL)
** those rules follow the open world assumption: new info doesn't invalid prior conclusions
* thus good way internally represent data created by widely different applications
* but not as a universal format -- XML is abstract and verbose enough!
 
!slide RDF syntax
* abstract model: a set of statements (or triples):
** subject (URI) property (URI) object (URI or literal).  
* various surface syntaxes: e.g.
** RDF/XML - the way RDF is most commonly seen.
** Ntriples, N3, Turtle, Trix - various other attempts
** RxML - my attempt

!slide RxPath
* Deterministic mapping of the RDF model to the XML data model defined by XPath. 
** used to query, update, and transform the RDF data store 
** syntactically identical to XPath 1.0, minor semantic differences
* Make RDF simple to use, by:
** Reduce "cognitive impedance" between RDF and XML
** Use existing tools and formats: XPath, XSLT, XForms, DOM, XUpdate, etc.
* RxSLT - extract and translates RDF to XML
* [[RxUpdate|save?action=view-source]] - update a Data store
* [[Schematron|validate-schema?action=view-source]] - validate changes to data store via ad hoc assertions 

!slide RxPath query engine
* transates XPath expression to an AST of relational operators
** just need select, project, join (reflexive equijoins and recursive joins), union
** simple yet optimizing query engine that invokes basic lookup primitives
** works with most popular RDF datastores with Python interfaces: Redland, RDFLib, 4Suite    
** they in turn work with the most popular SQL and embedded databases
* future:
** translate to AST to SPARQL or SQL directly
** allow pre-existing SQL schemas to be mapped to RDF queries
** SKOS, OWL-Lite inferencing (currently only supports RDF Schema)

!slide Raccoon 
* An application server that presents applications running on it a uniform and purely semantic view of the environment (i.e. as RDF).
* Roughly, Raccoon is to RDF as Apache's Cocoon is to XML.
* Request ==> Application (Rules + Store) ==> Response
** A request is a dictionary of simple values
** Raccoon maps external requests such as HTTP, command line arguments
* The application defines a pipeline of RxPath expressions that transforms a request into a response.

!slide Raccoon
* Can very aggressively cache throughout the pipeline
** Dependencies on the data store can be analyzed 
** side-effects can be played back 
* Raccoon also coordinates transactions that update the store.

!slide Rhizome Wiki
* standard Wiki functionality
* some more advance content management features:
** flexible authorization model
** draft/release workflow
** [[browse|keyword-browser]] by tags 
** supports popular XML vocabularies
*** DocBook, Apache Forrest
** edit via filesystem
** static export

!slide Rhizome Wiki Vision
* WikNames that are universal - site A can refer to and elaborate on a WikiName  created by site B without conflict.
* WikiNames that can refer to abstract entities, not content, such as
** programming artifacts like a function
** structured data such as a product description
** concepts
** relationships between entities, such as annotations or categories  

!slide Rhizome Wiki Components
* ZML
* RxML
* shredding
** contexts 
** GRDDL  
* content ontology: deterministically describe how final output is created
* authorization

!slide ZML Goals
* use wiki markup to write arbitrary html and xml 
* allow roundtripping of zml to html or xml and back again, so content could be written in ZML, then editied in a WYSIWYG HTML editor, and then viewed as ZML as again.
* semantic markup 
** distinguish naming vs. pointing
** typed blocks/sections
** annotations 
** outlining
* needs work!

!slide RxML
* yet another alternative syntax for RDF 
* target audience: those who don't know what RDF is
* try to be simple as .ini file
* uses ZML but specified as XML

!slide Security and Authorization
* Raccoon provides hooks for application specific authorization of most operations
* RxPath/XSLT sandbox is theorectically secure, can rely on authorization
* Python code local administrator must whitelist by content digest
* Raccoon various standard features: sanitization of html output, whitelist/blacklist IPs/URLs, controlled access to local file system, audit trails etc.

!slide Authorization
* two levels
** application-defined privileges (e.g. view, edit, save, etc.)
** fine-grained authorization of changes to the data store
* balance complexity and expressiveness
* uses a single RxPath expression that:  
** select all the access tokens that guard the target resource and apply to the requested privilege
** select all the access tokens with privilege that is granted to the user
** compare tokens, if the highest priority of the guard token is greater then the highest priority of user's tokens then access is denied  
** "guards" and "grants" paths are configurable; can support roles, classes, and hierarchical groups 

!slide Fine-grained authorization
* Authorize updates to store by considering each changed statement separately and incrementally 
** But RDF statements are too fine-grained for most rules, so aggregate entities using transitive closure  
** inferencing makes class-based access tokens complicated, only allow those as a separate, step at end of a transaction.

!slide Future Plans
* more usable in the real-world
** improve speed and scalability
** improve documentation (self-shredding)
* enable statements be published in a DHT like OpenHash 
* bridging implicit and explicit semantics
** folksonomy and ontology
** XML schemas and RDF ontologies
* new kind of commons: universally accessible ideas 
* http://wwww.liminalzone.org
