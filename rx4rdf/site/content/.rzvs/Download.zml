Rx4RDF requires Python 2.2 or later (2.3 recommended) and 4Suite 1.0a1 
or later ([http://4Suite.org]).

Rx4RDF and Rhizome are tested on Linux and Windows 2000/XP  
and should work on any platform that supports Python and 4Suite.
It has been known to work on Windows 98, Cygwin and OS X. 
For OS X you should have 4Suite 1.0a4 installed -- see
[http://uche.ogbuji.net/tech/akara/nodes/2003-01-01/osx] for more details.

[Source (zip)|http://sourceforge.net/project/showfiles.php?group_id=85676]

[Source (tar.gz)|http://sourceforge.net/project/showfiles.php?group_id=85676]

If you're just interested in ZML you just need this one Python [file|http://cvs.sourceforge.net/viewcvs.py/rx4rdf/rx4rdf/rx/zml.py].

Optional Packages:

If Lupy is installed ([http://www.divmod.org/Home/Projects/Lupy]), Rhizome will
perform full-text indexing of content (requires Python 2.3). 
See the Rhizome manual for more info.

On Windows, the Python Win32 Extensions ([http://python.org/windows/win32all]) 
must be installed or interprocess file locking will be disabled (You do not 
need this unless you have multiple Raccoon processes simultaneously accessing 
the same application instance).

RDFLib data stores can be used if RDFLib ([http://www.rdflib.net])
is installed. See the Raccoon manual for more info. In addition, if RDFLib is 
installed, its RDF/XML parser will be used by default (since the 4Suite's parser doesn't  
support the new RDF/XML syntax). 

Redland RDF data stores can be used if Redland ([http://www.redland.opensource.ac.uk])
is installed. See the Raccoon manual for more info.

!Install
This is a standard Python source distribution. To install:
1. Unzip
1. Run ^^python <unzip dir>/setup.py install^^

This installs:
* a package named "rx" in the Python ^^site-packages^^ directory
* shell scripts or .bat files for running Raccoon and ZML in the Python scripts directory (in the Python install directory on Windows or  or on Unix-like systems one of the standard "/usr/bin", "usr/local/bin", or "~/bin").
* a directory named "rx4rdf" containing documentation, Rhizome pages, and other ancillary files in the Python "share" directory (in the Python install directory on Windows or on Unix-like systems one of the standard "/usr/share", "usr/local/share", or "~/share").

!Upgrading
[Upgrading] contains notes on upgrading from the previous version.

!Quick Start
Once you've installed Rx4RDF, use this guide to quickly start playing with its various components. Also, see the ^^readme.txt^^ in the install package for release notes.

!!Raccoon and Rhizome
Run a local copy of this site:

1.^^cd <unzip dir>/site
1.either:
11.^^<python script dir>/run-raccoon -a site-config.py^^ or
11.^^python <python lib dir>/site-packages/rx/raccoon.py -a site-config.py
1.Browse to [http://localhost:8000] (edit server.cfg to change the port).

To start a fresh Rhizome site, just run Rhizome from the directory where you want the site to live:

1.^^cd <directory of the new site>
1.^^<python script dir>/run-raccoon -a <python share dir>/rx4rdf/rhizome/rhizome-config.py

!!RxPath
To run a query on an RDF or NTriples file:

^^python <python lib dir>/site-packages/rx/RxPathDom.py myrdf.rdf "RxPath expression"

If "RxPath expression" is omitted it will start in interactive mode.

RxPath expressions can be preceeded by one or more expressions of the form ^^xmlns(prefix=namespaceuri)^^, 
which set the namespace prefixes for subsequent RxPath expression (for duration 
of the session if in interactive mode). If the prefix is omitted (e.g. ^^xmlns(=http://example.org/ns)^^)
the default namespace will be set. 

!!RxSLT 
To invoke a RxSLT transform on a RDF or NTriples file:

^^python <python lib dir>/site-packages/rx/RxPathDom.py -t|--transform myrdf.rdf myrxslt.xsl

!!RxUpdate
There's no command line interface for RxUpdate yet -- to experiment with it run an instance of Rhizome and go to the Sandbox page 
(you'll probably have to login as admin).  Or see RxPath.py for programmatic interfaces.

!!ZML
Convert ZML to XML:

^^<python script dir>/zml \[-p] \[-d] \[-mm MyMarkupMapFactory()] zmlsample.zml
or
^^python <python lib dir>/site-packages/rx/zml.py \[-p] \[-d] \[-mm MyMarkupMapFactory()] zmlsample.zml

Convert ZML to XML:
^^<python script dir>/zml -z xmlsample.xml

Options: 
:-z convert from XML to ZML (if omitted: ZML to XML)
:-p pretty print
:-d show debug output

ZML to XML options:
:-m               assume ZML source is in markup mode
:-r \[rootelement] wrap in root element (default: "zml")
:-mm markupmap    \[string that evaluates to a Python class compatible with rx.zml.DefaultMarkupMapFactory]

!!RxML
Convert a RDF or NTriples file to RxML/ZML:

^^python <python lib dir>/site-packages/rx/rxml.py -r myrdf.rdf

Convert a RxML/XML file to RDF (NTriples):

^^python <python lib dir>/site-packages/rx/rxml.py -n myrdf.rdf

